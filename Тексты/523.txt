Интернет работает на основе RESTful API. За кулисами даже самой
простой онлайн-задачи стоят несколько компьютеров,
взаимодействующих друг с другом.
API (програмный интерфейс приложения) - это формальный способ
общения двух компьютеров, взаимодействующих друг с другом
напрямую. И хотя существует множество способов создания API, вебинтерфейсы, которые позволяют передавать данные через всемирную
паутину, в подавляющем большинстве случаев структурированы по
принципу RESTful (REpresentational State Transfer).
В этой книге вы узнаете, как построить несколько RESTful вебинтерфейсов с возрастающей сложностью с нуля, используя Django и
Django REST Framework, один из самых популярных и настраиваемых
способов создания веб-интерфейсов, используемый многими
крупнейшими технологическими компаниями в мире, включая Instagram,
Mozilla, Pinterest и Bitbucket. Этот подход также уникально хорошо
подходит для начинающих, поскольку подход Django
"батареи в комплекте" маскирует большую часть базовой сложности и
рисков безопасности, связанных с созданием любого веб-API.
Предпосылки
Если вы новичок в веб-разработке с Django, я рекомендую сначала
прочитать мою предыдущую книгу "Django для начинающих". Первые
несколько глав доступны бесплатно онлайн и охватывают правильную
настройку, приложение Hello World и приложение Pages. Полная версия
книги более глубока и охватывает веб-сайт Blog с формами и учетными
записями пользователей, а также готовый к производству сайт Newspaper
с кастомной моделью пользователя, полным потоком аутентификации
пользователей, электронной почтой, разрешениями, развертыванием,
переменными окружения и многим другим.
Этот опыт работы с традиционным Django очень важен, поскольку Django
REST Framework намеренно имитирует многие соглашения Django.
https://www.djangoproject.com/
http://www.django-rest-framework.org/
https://djangoforbeginners.com/
Также рекомендуется, чтобы читатели имели базовые знания о самом
языке Python. Полное освоение языка Python занимает годы, но, обладая
лишь небольшими знаниями, вы можете сразу же погрузиться в него и
начать создавать свои программы.
Почему API?
Django был впервые выпущен в 2005 году, и в то время большинство вебсайтов состояли из одной большой монолитной кодовой базы. "BackEnd" состоял из моделей баз данных, URL и представлений, которые
взаимодействовали с "Front-End" шаблонами HTML, CSS и JavaScript,
которые управляли презентационным оформлением каждой вебстраницы.
Однако в последние годы подход "API-first" стал, пожалуй, доминирующей
парадигмой в веб-разработке. Этот подход подразумевает формальное
отделение back-end от front-end. Это означает, что Django становится
мощной базой данных и API, а не просто каркасом для веб-сайта.
Сегодня Django, пожалуй, чаще используется в крупных компаниях как
просто API для бэкенда, а не как полноценное монолитное решение для
веб-сайта!
На этом этапе возникает очевидный вопрос: "Зачем это нужно?".
Традиционный Django достаточно хорошо работает сам по себе, и
превращение Django-сайта в веб-интерфейс кажется большой
дополнительной работой. К тому же, как разработчику, вам придется
писать специализированный фронтенд на другом языке
программирования.
Такой подход к разделению сервисов на различные компоненты, кстати,
широко известен как сервис-ориентированная архитектура.
(Service-oriented architecture .)
Однако оказалось, что разделение фронтенда и бэкенда имеет
множество преимуществ. Во-первых, это, вероятно, гораздо более
"перспективно"
, поскольку API бэкенда может быть использован любым
фронтендом JavaScript. Учитывая быстрые темпы изменения библиотек
для фронтенда - React был выпущен только в 2013 году, а Vue 6 - в 2014!
Когда в ближайшие годы текущие фронтенд-фреймворки будут заменены
еще более новыми, бэкенд API может остаться прежним. Никакой
серьезной переработки не потребуется.
Во-вторых, API может поддерживать несколько фронтендов, написанных
на разных языках и в разных фреймворках.
Подумайте, что JavaScript используется для веб-фронтэндов, в то время
как для приложений Android требуется язык программирования Java, а
для приложений iOS - язык программирования Swift. При традиционном
монолитном подходе веб-сайт Django не может поддерживать эти
различные фронт-энды. Но с помощью внутреннего API все три могут
взаимодействовать с одной и той же базовой версией базы данных!
В-третьих, подход, основанный на API, можно использовать